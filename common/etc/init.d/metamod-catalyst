#!/bin/sh
# Start a Catalyst app under Engine::HTTP(::Prefork)

# *** INSTALLATION ***
#
# 1. copy this file to /etc/init.d/catalyst-[==APPLICATION_ID==]
# 2. edit file "default" and copy to /etc/default/catalyst-[==APPLICATION_ID==]
# or do it the simple way, just run install_jobs.sh

### BEGIN INIT INFO
# Provides: MetamodWeb
# Required-Start: $local_fs $network $named
# Required-Stop: $local_fs $network $named
# Should-Start: apache2
# Should-Stop: apache2
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: MetamodWeb
### END INIT INFO

. /lib/lsb/init-functions

APPNAME=MetamodWeb
UNIXNAME=$(echo $APPNAME | perl -pe 's/::/_/;$_=lc')
APPID=[==APPLICATION_ID==]

# settings for running from target
APPDIR=[==TARGET_DIRECTORY==]
COMMON_LIB=[==TARGET_DIRECTORY==]/lib
BINDIR=[==TARGET_DIRECTORY==]/bin

# settings for running from source (DOESN'T SEEM TO WORK)
#APPDIR=[==SOURCE_DIRECTORY==]/catalyst
#COMMON_LIB=[==SOURCE_DIRECTORY==]/common/lib
#BINDIR=[==TARGET_DIRECTORY==]/script

LOCAL_LIB=[==CATALYST_LIB==]
export PERL5LIB=$APPDIR/lib:$COMMON_LIB:$LOCAL_LIB

# -------------

# Leave these unset and we won't try to setuid/setgid.
USER=[==APPLICATION_USER==]
GROUP=

if [ -f "/etc/default/catalyst-$APPID" ]; then
    # use this file to set prefork engine + master_config path
    . "/etc/default/catalyst-$APPID"
fi

# -------------

#if [ $(id -u) -eq 0 ] ; then
#  PIDDIR=/var/run/$UNIXNAME
#  mkdir $PIDDIR >/dev/null 2>&1
#  chown $USER:$GROUP $PIDDIR
#  chmod 775 $PIDDIR
#else
#  PIDDIR=/tmp
#fi

# Set this if you have more than one instance of the app and you don't want
# them to step on each other's pidfile.
PIDSUFFIX=[==APPLICATION_ID==]
PIDDIR=[==WEBRUN_DIRECTORY==]
PIDFILE=$PIDDIR/$UNIXNAME${PIDSUFFIX:+"-$PIDSUFFIX"}.pid

# -------------

check_running() {
    [ -s $PIDFILE ] && kill -0 $(cat $PIDFILE) 2> /dev/null
}

check_compile() {
    if [ -n "$USER" ] ; then
        if su -s /bin/sh $USER -c "cd $APPDIR ; perl -M$APPNAME -ce1 3> /dev/null" ; then
            return 1
        fi
        return 0
    else
        if ( cd $APPDIR ; perl -M$APPNAME -ce1 3> /dev/null ) ; then
            return 1
        fi
        return 0
    fi
}

status() {
    if check_running ; then
        log_success_msg "Catalyst is running on PID" $(cat $PIDFILE)
        return 0
    else
        log_failure_msg "Catalyst is not running"
        return 3
    fi
}

_start() {
    start-stop-daemon --start --verbose --pidfile $PIDFILE -m --chdir $APPDIR \
        ${USER:+"--chuid"} $USER ${GROUP:+"--group"} $GROUP --background \
        --startas $BINDIR/${UNIXNAME}_server.pl -- --port $port \
        --min_servers=2 --max_servers=5 --min_spare_servers=1 --max_spare_servers=3

    for i in 1 2 3 4 5 ; do
        sleep 1
        if check_running ; then
            return 0
        fi
    done
    # chown $USER:$GROUP $PIDFILE # this only works when root
    return 1
}

start() {
    log_daemon_msg "Starting $APPNAME Catalyst for $APPID" $UNIXNAME
    if check_running; then
        log_failure_msg "already running"
        log_end_msg 1
        exit 1
    fi

    if check_compile ; then
        log_failure_msg "Error detected; not restarting."
        log_end_msg 1
        exit 1
    fi

    rm -f $PIDFILE 2>/dev/null

    _start
    log_end_msg $?
    return $?
}

stop() {
    log_daemon_msg "Stopping $APPNAME Catalyst for $APPID" $UNIXNAME
    if check_running; then
        start-stop-daemon --stop --retry 1 --quiet --pidfile $PIDFILE ${USER:+"--user"} $USER
        log_end_msg $?
        return $?
    else
        log_daemon_msg "Catalyst $APPID not running" $UNIXNAME
        return 0
    fi
}

restart() {
    stop
    start
    return $?
}

# See how we were called.
case "$1" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    status)
        status
    ;;
    restart|force-reload)
        restart
    ;;
    *)
        echo " Usage: $0 {start|stop|restart|status}"
        exit 1
esac
exit $?
