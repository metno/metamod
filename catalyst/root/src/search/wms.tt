<html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <title>WMS client</title>
        <link rel="stylesheet" href="[% c.uri_for('/static/css/openlayers_theme/default/style.css') %]" type="text/css" />
        <!--link rel="stylesheet" href="style.css" type="text/css" /-->
        <style type="text/css">
            #warning {font-size: x-large; padding:22 22 22 22; text-decoration: blink; color: red;}
            form, .olControlPermalink {font-size: x-small; font-family: sans-serif}
            /* crappy css selectors below don't work... have to use inline styles instead :( */
            /*#timebox { visibility: hidden };*/
            /*img#legend { float: right; position: relative; top: 200px; z-index: 1000 };*/
            /*#form1 { float: top; }*/
        </style>

        <!-- calendar stylesheet -->
        <!--<link rel="stylesheet" type="text/css" media="all" href="[% c.uri_for('/static/js/jscalendar-1.0/calendar-win2k-cold-1.css') %]" title="win2k-cold-1" />-->
        <!-- main calendar program -->
        <!--<script type="text/javascript" src="[% c.uri_for('/static/js/jscalendar-1.0/calendar.js') %]"></script>-->
        <!-- language for the calendar -->
        <!--<script type="text/javascript" src="[% c.uri_for('/static/js/jscalendar-1.0/lang/calendar-en.js') %]"></script>-->
        <!-- the following script defines the Calendar.setup helper function, which makes
             adding a calendar a matter of 1 or 2 lines of code. -->
        <!--<script type="text/javascript" src="[% c.uri_for('/static/js/jscalendar-1.0/calendar-setup.js') %]"></script>-->

        <script type="text/javascript" src="[% c.uri_for('/static/js/log4javascript-1.4.2/js/log4javascript.js') %]"></script>
        <script type="text/javascript" src="[% c.uri_for('/static/lib/OpenLayers.js') %]"></script>
        <script type="text/javascript" src="[% c.uri_for('/static/lib/Firebug/firebug.js') %]"></script>
        <script type="text/javascript">

			var	log = log4javascript.getDefaultLogger();

            [% IF 1 # ! debug # disable logging in production %]
                log = log4javascript.getNullLogger();
            [% END %]

            // making this a global variable so that it is accessible for
            // debugging/inspecting in Firebug
            var map = null;
            OpenLayers.IMAGE_RELOAD_ATTEMPTS = 5;

            //var wmsCapabilities;
            //var wmsLayers;
            //var error;

            var coastlinemaps = { // read from master_config
                "EPSG:4326":  "http://wms.met.no/maps/world.map?",
                "EPSG:32661": "http://wms.met.no/maps/northpole.map?",
                "EPSG:32761": "http://wms.met.no/maps/southpole.map?"
            }

            function init(){
                // run after document is loaded

                //read CGI args
                var args = new OpenLayers.Util.getArgs();
                var ds_id = [% datasets.0.ds_id || 'undefined' %];
                var wms_setup = args.wmssetup;
                var wms_url = args.wmsurl;

                // remove "javascript not installed" message from window
                document.getElementById('docs').removeChild( document.getElementById('warning') );

                if (typeof ds_id != 'undefined') {
                    OpenLayers.loadURL("[% c.uri_for('/gc2wmc') %]?ds_id=" + ds_id, "", this, drawMap, showError);
                } else if (typeof wms_setup != 'undefined') {
                    alert('wmssetup not supported - use ds_id istead!');
                    //OpenLayers.ProxyHost = "/gc2wmc?wmssetup=";
                    //OpenLayers.loadURL(wms_setup, "", this, drawMap, showError);
                } else if (typeof wms_url != 'undefined') {
                    //alert("wmsurl = " + wms_url);
                    //OpenLayers.ProxyHost = "/gc2wmc?getcap=";
                    OpenLayers.loadURL('[% c.uri_for('/gc2wmc') %]?getcap='+wms_url, "", this, drawMap, showError);
                } else {
                    alert("Missing ds_id or wmsurl parameter!");
                }

            }

            function buildStyleSelector(styles, layername) {
                // called every time layer or style is changed
                current = map.baseLayer.params["STYLES"] || styles[0].name || '';
                var sel = document.forms["form1"].wmsstyle;
                sel.length = 0;
                for (i = 0; i < styles.length; i++) {
                    var opt = styles[i].name;
                    var option = document.createElement('option');
                    option.setAttribute('value', opt);
                    option.appendChild( document.createTextNode(opt.slice(8)) ); // remove BOXFILL prefix
                    sel.appendChild(option);
                    if (opt == current) {
                        //alert(opt);
                        // set current option as selected
                        sel.selectedIndex = i;
                        // change legend URL (have to set both LAYER and LAYERS due to bug in ncWMS)
                        document.getElementById('legend').src = styles[i].legend.href + '&LAYERS=' + layername;
                    }
                }
            }

            function buildTimeSelector(times) {
                //current = times[0];
                var sel = document.forms["form1"].wmstime;
                sel.length = 0;

                if (typeof times != 'undefined') {
                    for (i = 0; i < times.values.length; i++) {
                        var opt = times.values[i];
                        var option = document.createElement('option');
                        option.setAttribute('value', opt);
                        option.appendChild( document.createTextNode(opt) );
                        sel.appendChild(option);
                        //if (opt == current) {
                        //    //alert(opt);
                        //    // set current option as selected
                        //    sel.selectedIndex = i;
                        //}
                    }
                } else {
                    log.trace('times is null');
                }

                // hide or show depending on time dimension existing in this layer
                if (times.values.length > 0 ) {
                    $('timebox').show;
                } else {
                    $('timebox').hide;
                }

            }

            function changeFile(new_ds_id) {
                map.destroy();
                OpenLayers.loadURL("[% c.uri_for('/gc2wmc') %]?ds_id=" + new_ds_id, "", this, drawMap, showError);
                //$('wmstime').length = 0;
                buildTimeSelector(map.layer[0].dimensions.time);
            }

            function changeLayer(event) {
                // triggered when user changes layer
                log.debug("layer " + event.layer.name + " is " + ( event.layer.getVisibility ? "on" : "off" ) );
                document.getElementById('legend').src = "[% c.uri_for('/static/img/blank.gif') %]"; // placeholder image
                //if (event.layer.isBaseLayer && event.layer.visibility) { // why baselayer?
                if (event.layer.visibility) {
                    //buildStyleSelector(event.layer.metadata.styles, event.layer.params.LAYERS);
                    //buildTimeSelector(event.layer.dimensions.time); // FIXME accumulate - don't remove times when turning grid on
                }

            }

            function changeStyle(style) {
                // triggered when user changes style
                log.debug("new style = " + style);
                map.baseLayer.mergeNewParams( {STYLES: style} );
            }

            function changeTime(dtime) {
                // triggered when user changes time
                log.debug("setting time to " + dtime + " for " + map.layers.length + " layers");
                //map.baseLayer.mergeNewParams( {time: dtime} ); // FIXME - won't work if map
                for (var i = 0; i < map.layers.length; i++) {
                    var li = map.layers[i];
                    //log.debug(i + ": setting layer " + li.name + " to " + dtime);
                    try {
                        if (li.dimensions.time !== undefined) {
                            li.mergeNewParams( {time: dtime} );
                        } else {
                            log.debug('layer ' + li.name + ' is beyond space and time')
                        }
                    } catch (error) {
                        log.warn("Could not set layer time: " + error);
                    }
                }
            }

            function changeLegend(event) { // deprecated (why?)
                // triggered when user changes layer
                if (event.layer.isBaseLayer) {
                    document.getElementById('legend').src = event.layer.legend;
                }
            }

            function drawMap(response) {

                wmsContext = response.responseXML;
                if (wmsContext === undefined) {
                    log.fatal("WMC is null!");
                    return 0;
                }

                var layersw = new OpenLayers.Control.LayerSwitcher({'autoActivate': false, 'ascending': false});

                wmcParser = new OpenLayers.Format.WMC();
                try {
                    map = wmcParser.read( wmsContext, { map: { div: 'map', controls: [] } } );
                } catch (error) {
                    log.fatal("Invalid GetMapContext:\n" + error + "\n" + response.responseText);
                    return 0;
                }

                //map.events.on( { changeLayer: changeLegend } );
                this.map.events.register("changelayer", this, changeLayer);

                var coastlines_url = coastlinemaps[map.projection];
                log.debug("Projection = " + map.projection + "; map = " + coastlines_url);

                if (coastlines_url !== undefined) {
                    var coastlines = new OpenLayers.Layer.WMS(
                        "Met.no kart",
                        coastlines_url,
                        {
                            transparent: "true",
                            layers: 'borders'
                        },
                        {
                            isBaseLayer: false
                        }
                    );

                    try {
                        map.addLayer(coastlines);
                    } catch (error) {
                        log.fatal(error);
                        return 0;
                    }
                    //map.addControl( new OpenLayers.Control.OverviewMap( {layers: [coastlines]} ) ); // gives "bounds is null" error
                }

                map.addControl(layersw);
                map.addControl( new OpenLayers.Control.MousePosition() );
                map.addControl( new OpenLayers.Control.PanZoomBar() );
                map.addControl( new OpenLayers.Control.Navigation() );
                map.addControl( new OpenLayers.Control.ScaleLine() );
                map.addControl( new OpenLayers.Control.Permalink('permalink') );
                layersw.maximizeControl(true);

                for (var i=0; i < map.layers.length; i++) {
                    var times = map.layers[i].dimensions.time;
                    log.debug(i + ' >>> ' + typeof times + ' vals=' + times.values.length);
                    if (times !== undefined) {
                        //log.debug("layer " + map.layers[i].name + " has " + times.length + " timestamps")
                        log.debug(map.layers[i].name + " time: " + times.values[0] + ", default: " + times.default);
                        var start = times.default || times.values[0];
                        try {
                            buildTimeSelector(times);
                            changeTime(start);
                        } catch (error) {
                            log.error(i + ': ' + error + '; Bad timing: ' + start);
                        }
                        break; // loop until a layer with times found
                        // TODO: layers have not the same amount of time values
                    }
                }

                var layer0 = map.layers[0].params.LAYERS;
                buildStyleSelector(map.layers[0].metadata.styles, layer0); // FIXME hack

                // set legend URL (have to set both LAYER and LAYERS due to bug in ncWMS)
                //if (map.layers[0].metadata.styles[0].legend) {
                //    document.getElementById('legend').src = map.layers[0].metadata.styles[0].legend.href + '&LAYERS=' + layer0;
                //}

                // Print resource link for debugging
                //var a = document.createElement("a");
                //a.href = wms_url + "?service=WMS&version=1.3.0&request=GetCapabilities";
                //a.href = wms_setup;
                //a.appendChild( document.createTextNode(wms_setup) );
                //document.getElementById('shortdesc').appendChild(a);

                // set page headings
                //var heading = map.layers[0].name;
                //document.title = heading;
                //document.getElementById('title').appendChild( document.createTextNode(heading) );

            }

            function showError(response) {
                var b = document.createElement('b');
                b.appendChild( document.createTextNode("Could not contact WMS server! ") );
                document.getElementById('shortdesc').appendChild(b);
                document.getElementById('shortdesc').appendChild( document.createElement('br') );
                document.getElementById('shortdesc').appendChild( document.createTextNode("Error from backend is: " + response.status + " " + response.statusText) );
            }

        </script>

    </head>
    <body onload="init()">

        <div id="map" class="largemap"></div>
        <div id="docs"><p id="warning">Javascript must be enabled for WMS client to work!</p></div>
        <!--<div id="tags"></div>-->

        <img id="legend" src="[% c.uri_for('/static/img/blank.gif') %]" style="position: absolute; right: 5px; top: 200px; z-index: 1000"/> <!--fix vpos-->
        <form name="form1" id="form1" action="#" style="position: absolute; top: 0px; left: 60px; z-index: 1000">

            <label>Dataset:
                <select name="dataset"  id="dataset" onChange="changeFile(this[this.selectedIndex].value)">
                    [% FOR ds IN datasets %]
                        <option value="[% ds.ds_id %]">[% ds.ds_name %]</option>
                    [% END %]
                </select>
            </label>

            <label>Style: <select name="wmsstyle" id="wmsstyle" onChange="changeStyle(this[this.selectedIndex].value)"></select></label>

            <label id="timebox">Time: <select name="wmstime" id="wmstime" onChange="changeTime(this[this.selectedIndex].value)"></select></label>

            <!--<input type="hidden" name="date" id="f_date_e" />-->
            <!--<img src="[% c.uri_for('/static/js/jscalendar-1.0/img.gif') %]" id="f_trigger_e" style="cursor: pointer; border: 1px solid red;"-->
            <!--     title="Date selector" onmouseover="this.style.background='red';"-->
            <!--     onmouseout="this.style.background=''" />-->
            <!--<span id="show_e">-- not entered --</span>-->
            <!--<script type="text/javascript">-->
            <!--    Calendar.setup({-->
            <!--        inputField     :    "f_date_e",     // id of the input field-->
            <!--        ifFormat       :    "%Y/%d/%m",     // format of the input field (even if hidden, this format will be honored)-->
            <!--        displayArea    :    "show_e",       // ID of the span where the date is to be shown-->
            <!--        daFormat       :    "%A, %B %d, %Y",// format of the displayed date-->
            <!--        button         :    "f_trigger_e",  // trigger button (well, IMG in our case)-->
            <!--        align          :    "Tl",           // alignment (defaults to "Bl")-->
            <!--        singleClick    :    true-->
            <!--    });-->
            <!--</script>-->
            <!--<style type="text/css">-->
            <!--    .calendar .combo { z-index: 2147483647; }-->
            <!--</style>-->

            <span id="shortdesc"><!--Data file (direct): --></span>

        </form>

    </body>
</html>
