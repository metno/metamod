=head1 Building the METAMOD software

Back to L<Index|index>

=head2 Introduction

This describes how to build the METAMOD software on a Linux server.
No services will be available until you configure and set up a METAMOD instance
(see L<Deploying a METAMOD application|deploying>) as well as a database instance.

=head2 Required software

=over 4

=item PostgreSQL database system

The current version requires PostgreSQL 9.1 or later.
It has also been tested on version 8.3 and 8.4, but some
features may not work (in particular some PostGIS projections
required for dynamic map search may be missing).
If running a local database you need the PostgreSQL
server, otherwise only the client is required.

=item libxml and libxslt library

From xmlsoft.org

=item Proj4 library

L<http://proj.maptools.org>

=item NetCDF software 3.5 or later

libnetcdf, ncdump and ncgen

=item Apache 2.x web server (optional)

With mod_proxy, mod_proxy_http and mod_rewrite installed

=item FIMEX (optional, but recommended)

While not stricly necessary, FIMEX is required for functionality regarding
transformation and OPeNDAP. However, since it is not available via official Ubuntu
repositories it is not a required dependency. You can find it on
L<Launchpad|https://launchpad.net/~heiko-klein/+archive/ubuntu/fimex> (binaries) and
in L<Subversion|https://svn.met.no/viewvc/fimex/> (source).

=back

A complete list of required software can be found in L<"debianE<sol>control"|debian/control>.
If not running Ubuntu you must figure out the package names in your distro for yourself.
As of 2.13, the Build dependency packages for Ubuntu 12.4 are:

=over 4

    postgresql, postgresql-contrib, postgis, postgresql-9.1-postgis,
    debhelper (>=5), perl, make, fakeroot, cpanminus, libproj-dev,
    libgdbm-dev, libpng-dev, libnetcdf-dev, libexpat1-dev, libxml2-dev,
    libxslt1-dev, libssl-dev

=back

B<Note:> C<proj> seems to have been renamed C<proj-bin> in Ubuntu 14.4.
Also you need C<postgresql-9.3-postgis-2.1> instead of C<postgresql-9.1-postgis>.

=head2 Installation from source

=head3 Download the METAMOD source code

Check out the METAMOD source code from Subversion into a suitable directory:

  $ mkdir metamod
  $ cd metamod
  $ svn co https://svn.met.no/metamod/trunk

A tar.gz file may also be available at a later date.

=head3 Installing binary dependencies

METAMOD depends on several non-Perl compiled utilities and libraries which must be installed separately, including:

=over 4

=item *

PostgreSQL client and optionally server (preferrable 9.1 or later), as well as the DBD driver for Perl DBI

=item *

the GNOME LibXML2 and LibXSLT libraries

=item *

the Expat XML library

=item *

the PROJ.4 Cartographic Projections library from osgeo.org

=item *

the OpenSSL Library

=back

Installing these via Debial packages using C<apt-get> is recommended if possible.
A complete list of the required Debian packages can be found in F<debian/control>
under 'Depends' and 'Build-Depends'.


=head2 Building the Perl CPAN libraries

When installing from source, you must build the necessary Perl modules from CPAN.
This used to be a major chore, but is now possible to do with a single command using
the new Perl module dependency manager Carton. You don't even need to download
the tarballs from CPAN as they are already included in the Subversion repo.

=head3 cpanminus

First, you need to be able to install Perl modules from CPAN.
There are several tools available for this, but we recommend using B<cpanminus>
which can be installed using either of the following commands:

  $ apt-get install cpanminus                               # for Debian systems
  $ curl -L http://cpanmin.us | sudo perl - App::cpanminus  # from source

=head3 Carton

Carton can download and build the required METAMOD Perl dependency modules automatically.
Unlike the C<cpan> script it will install the exact same module versions every time, avoiding upgrade
conflicts and making sure you have the same environment as have been tested. It even bundles
all the source tarballs into the local source repo so you don't even need online access to deploy.

  $ cpanm -S Carton

This should install version 1.0.12 or later. Versions below 1.0.0 are not supported (they cannot read the cpanfile.snapshot file).

=head3 METAMOD dependencies

You are now ready to build the Perl dependency libraries:

  $ cd ~/metamod/trunk
  $ make deps        # for development
  $ make deployment  # for testing/servers

Carton will then install the modules listed in F<cpanfile.snapshot> into F<~/metamod/trunk/local/lib>.
No network connection is needed when using C<make deployment> as this uses the modules supplied in F<~/metamod/trunk/vendor/cache>.
This should not generate any errors as long as you have installed all the necessary binary libraries as listed above.

=head4 Adding new dependencies

If you are a METAMOD developer and want to add more Perl modules, add the required name and version to F<cpanfile>,
then run:

  $ make deps
  $ make bundle
  $ svn ci

This will download and compile the necessary modules, and put the source
tarballs into the vendor/cache directory to simplify building later.
The version numbers in the snapshot will be updated.

=head4 Running programs with Carton

  ~/metamod/trunk$ carton exec perl catalyst/script/metamodweb_server.pl --config <dir>

=head3 PERL5LIB

Make sure that  C<CATALYST_LIB> is not set in F<master_config.txt>, and
your C<PERL5LIB> environment variable is set to point to your local/lib/perl5 directory.
This is handled automatically by C<activate> and F<init.d> scripts.

=head3 Alternate installation methods

As usual you could always install the required modules directly from CPAN,
although this is a major hassle and you have no way of ensuring you get a working
set of libraries (since cpan always pulls down the latest version).
However, if you decided to install them outside your normal @INC path you need
to specify the location in C<CATALYST_LIB> in master_config.txt, as well as in
PERL5LIB when running from the command line (activate_env doesn't handle this special case yet).
