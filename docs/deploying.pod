=head1 Deploying a METAMOD application

Back to L<Index|index>

Before you can deploy a METAMOD application you must set up a configuration
directory, see L<METAMOD Configuration|configuration>.

After the initial configuration has been completed, a number of scripts must be
run before the application is up and running.

=begin obsolete

As these scripts will create files and directories that also are used by the
Apache runtime environment, it is important that I<the user running these
scripts is the same as the user running Apache>.

=end obsolete

=head2 Installing services

After installation of the software and one or more configurations, you should
now install the application services where the operating system can find it.
Currently only Debian-based Linux systems are supported.

This script will create an Apache configuration file, as well as init.d scripts
for automatic starting and stopping of Catalyst and the various METAMOD services
for the specific application. These files are normally owned by root and will be
placed in in F<E<lt>configuration dirE<gt>/etc>, and then symlinked into F</etc/apache2> and
F</etc/init.d>.

  $ cd /opt/metno-metamod-2.13 # or elsewhere if installed from source
  $ ./install_jobs.sh <config>

=head3 Users with restricted sudo privileges

Some users may not have full sudo rights, and/or having PERL5LIB stripped out when
running under sudo (see L<http://www.sudo.ws/sudo/alerts/perl_env.html>). You will
then typically get the following error message:

  sudo: sorry, you are not allowed to set the following environment variables: PERL5LIB

If so you may run install_jobs with the -u option (for unprivileged), in which case
all files will be owned by yourself instead of root:

  $ ./install_jobs.sh -u <config>

Note that this is not recommended in production environments where several login
users are administering the system.

=head2 Setting the environment

Before running any other scripts you must tell METAMOD where to find its libraries.

=head3 Using virtualenv.pl

For simplicity you may use virtualenv.pl to generate a bash script F<./bin/activate>
which sets the relevant environment variables. This can then be sourced in all
your scripts without the need to supply the config dir parameter.

From anywhere execute the following command:

  $ cd <PATH TO CONFIGURATION DIR>
  $ /opt/metno-metamod-2.13/virtualenv.pl .
  $ source ./bin/activate

This will enable the correct environment. To disable the environment again type:

  $ deactivate

./bin/activate replaces the bash script F<activate_env>, which is now deprecated.

=head3 Setting the environment manually

  $ export PERL5LIB="/opt/metno-metamod-2.13/local/lib/perl5"

If desired you may also predefine the application config path. Then you won't have
to specify the <config> parameter for each script.

  $ export METAMOD_MASTER_CONFIG="/path/to/applic/config"

All commands also run without these variables, but you must then specify the
correct executable paths, configuration directory and PERL5LIB for every command,
which is rather cumbersome.

=head2 Creating the webrun directory

The application also needs several directories to store files during operation.
Run the script

  prepare_runtime_env.sh <config>

which will initialize a runtime directory used by the application for
logging, temporary files etc. owned by the APPLICATION_USER user. If already
existing nothing will be deleted, although file ownership may be updated to the
current configuration. (Note that if your current user does not have write
privileges to WEBRUN_DIRECTORY this script will fail.)

=head2 Initializing the BASE module

At this point, the deployment of the application is complete for all instances
not using the BASE module. For an application using the BASE module, a few steps
remains:

As explained in the B<Data base> paragraph, several METAMOD applications may
co-operate in a cluster, and share a common data base. One of these applications
must use the BASE module, and no other. The last steps (described below)
required for the base application must be done after the initial steps
(described above), for all applications in the cluster, are completed.

=head3 Creating databases

The two PostgreSQL databases used by the cluster must be initialized. Note that
the two databases are operated through two database users. The name of these
users are found in the C<master_config.txt> file as the value of PG_ADMIN_USER
and PG_WEB_USER configuration variables. These users must be defined in the
PostgreSQL database environment before the database initialization scripts can
be run:

  base/init/createusers.sh

It is only necessary to run this script once for a PostgreSQL database
environment.

The first SQL database initialization script will create the Meta database.

  base/init/create_and_load_all.sh

This script will create the database, and load the static content of the database (taken from
C<staticdata/searchdata.xml>). You may check the output of this script in the
C<create_and_load_all.out> file in the directory where you are running the command.

The next SQL database initialization script will create the User database.

  base/init/run_createuserdb.sh

Note that I<this script must only be used during setup of a completely new
METAMOD cluster>. If a User database already exists, all data in the database
will be lost. If this should happen, you must recreate the database from a
backup copy you hopefully have. But METAMOD will not by itself ensure that such
a backup exists.

This warning is only adequate for the C<run_createuserdb.sh> script. The other
scripts in this paragraph (C<prepare_runtime_env.sh>, C<create_and_load_all.sh>)
may all be used on an existing installation, without harming existing data. The
C<create_and_load_all.sh> script will take some time to complete, though. On an
existing installation, all metadata in the database will be loaded from the XML
archive.

=head3 Email configuration (FIXME)

To configure exim, run:

  $ sudo dpkg-reconfigure exim4-config

See the Exim documentation for more information.

=head2 Starting METAMOD

There are two ways of starting METAMOD; either as a system service (recommended
for production environments) or as a series of command line script (recommended
for development). In the latter case you would normally run the Catalyst web server
continously and start the other daemons as necessary (prepare_download, harvester
et al).

=head3 Catalyst daemon

First, try starting Catalyst by running

  $ export PERL5LIB=/opt/metno-metamod-2.13/common/lib:/opt/metno-metamod-2.13/catalyst/lib:/opt/metno-metamod-2.13/local/lib/perl5
  $ /opt/metno-metamod-2.13/catalyst/script/metamodweb_server.pl -d myapp

replacing the path to METAMOD on line 2 if running from source.

MetamodWeb should now be available on L<http://localhost:3000/>.
If all set you should see the METAMOD search interface.
Stop with ctrl-c.

If that worked, you may then try to start it as a service:

  sudo /etc/init.d/catalyst-APPLICATION_ID start

=head3 Apache

Accessing METAMOD directly from Catalyst is not recommended in production;
instead a proxy server like Apache is recommended. C<./install_jobs.sh>
automatically generates the necessary Apache setup files for you.

If this has not already been done you need to enable the Apache proxy modules.
Look in /etc/apache2/mods-enabled to see if they have already been enabled.

  sudo a2enmod proxy
  sudo a2enmod proxy_http

Restart Apache:

  sudo apache2ctl restart

or if the site is busy:

  sudo apache2ctl graceful

which will wait until all connections are terminated before restarting.

The site should now hopefully be available on

  http://localhost/APPLICATION_ID


=head3 METAMOD services

Start METAMOD:

  sudo /etc/init.d/metamodServices-APPLICATION_ID start

This should start the required services daemons.


=begin OBSOLETE

=head2 TESTING (FIXME)


2. To copy the software to the target directory and make the substitutions
prescribed by the master_config.txt file, do the following:
cd to the source directory (i.e. this directory)
run:    ./update_target.pl app/example

3. Assuming the PostgreSQL software is already installed, the PostgreSQL
users (admin and webuser) that are to access the database must be created.
This step is only needed one time. PostgreSQL users are for the whole
PostgreSQL installation, and not connected to specific databases.
cd to the target directory
run:    scripts/createusers.sh

4. Initialize the runtime environment:
cd to the target directory
run:    ./prepare_runtime_env.sh

5. Initialize the database, and load static data:
cd to the target directory
cd init
run:    ./create_and_load_all.sh
You may check the output of this script in the create_and_load_all.out
file in the same init directory.

6. Ensure that you have a working Apache 2.x installation with mod_proxy.
The httpd daemon should run as the same user as the METAMOD 2.x perl scripts.
Otherwise problems with access rights to files in the webrun directory
will arise. These problems could be solved by using 'umask'
and similar tools, but the METAMOD 2.x software is not prepared for this.
The Apache installation must allow .htaccess files and softlinks.

7. Make the METAMOD 2.x URLs accessible through the Apache server. This can
either be done by making the METAMOD 2.x htdocs directory the Apache 2.x
DocumentRoot directory. Otherwise, this can be done by providing a symbolic
link in the Apache 2.x DocumentRoot directory to the METAMOD 2.x htdocs
directory. This symbolic link must agree with the LOCAL_URL set up in the
master_config.txt file.

8. At this time all the web applications should work. Confirm this by visiting
the URLs for the two main web pages in the example application
(METAMODSEARCH and METAMODUPLOAD) from a browser (the URLs are found in
the master_config.txt file). Check also that the administration web
page is working.

9. Enter the METAMODUPLOAD web page from a browser and create a user
account. The operator will recieve an E-mail with the user details and an URL.
Activating this URL will admit the user into the system. After activating this
URL, the user recieves an E-mail with a password. In the test environment,
this E-mail will be sent to the operator instead.

10. Start the perl scripts responsible for loading data into the database:
cd to the target directory
run:     ./metamodInit.sh start

11. Enter the METAMODUPLOAD web page from a browser and log into the
user account you have created. Enter the "Administration" page and create
the directory 'test1' (this will also be the name of a new dataset that
later will be loaded into the database). Go back to the "Upload files" page
and upload the two files test1_arctic20.200611.cdl and test1_synop_99710.cdl
found in the testdata directory.

12. After a few minutes, check that metadata from the files have been
loaded into the database. This can be done by looking at the system log
(path defined by the LOG4ALL_SYSTEM_LOG variable in master_config.txt), and by
entering the METAMODSEARCH web page and search for the data.

13. Do a similar exercise with the files test2_arctic20.200611.cdl and
test2_synop_99710.cdl. A new directory/dataset has to be created for these
files in the administration page: 'test2'. These files do not satisfy the
requirements specified in the etc/conf_digest_nc.xml file. The perl script
digesting these files will generate an error report that will be accessible
from the METAMODUPLOAD web page. Also, the data provider will be
sent an E-mail with a reference to this error report. In the test environment,
this E-mail will be sent to the operator instead.

14. Stop the perl scripts responsible for loading data into the database:
cd to the target directory
run:     ./metamodInit.sh stop

=end OBSOLETE
