#!/usr/bin/perl -w

=begin LICENCE

----------------------------------------------------------------------------
  METAMOD - Web portal for metadata search and upload

  Copyright (C) 2013 met.no

  Contact information:
  Norwegian Meteorological Institute
  Box 43 Blindern
  0313 OSLO
  NORWAY
  email: geira@met.no

  This file is part of METAMOD

  METAMOD is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  METAMOD is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with METAMOD; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
----------------------------------------------------------------------------

=end LICENCE

=cut

use strict;
use warnings FATAL => qw( all );

use FindBin qw($Bin);
use lib "$Bin/common/lib";
use Metamod::Config;
use Getopt::Long;
use Data::Dumper;
use Term::ANSIColor;
use Pod::Usage;

#Getopt::Long::Configure ("bundling");
my ($help, $split, $config_file_or_dir, $default, $custom, $defaults);
my $color = -t STDOUT; # use IO::Interactive::Tiny instead - FIXME
GetOptions(
    'help'      => \$help,      # for dummies
    'default!'  => \$default,   # set in default_config
    'custom!'   => \$custom,    # set in master_config
    'color!'    => \$color,     # use colors
    'split'     => \$split,     # split var into key-value pairs
    'config=s'  => \$config_file_or_dir,
    'defaults!' => \$defaults,  # show def indicator
) or pod2usage(2);
#print STDERR Dumper [ $help, $split, $config_file_or_dir, $default, $custom ];

pod2usage(1) if $help;

if (defined $color) {
    $ENV{ANSI_COLORS_DISABLED} = 1 unless $color;
}
$defaults = ! $color unless defined $defaults; # use def prefix unless colorized

Metamod::Config->config_found($config_file_or_dir) or pod2usage(2);
my $mm_config = Metamod::Config->new($config_file_or_dir, { nolog => 1 } );

my $var = shift @ARGV;
my $vars;
my $flags = $mm_config->getallflags();

if ( !defined($var) || $var =~ /(.+)\*$/ ) {
    $vars = $mm_config->getall();
    if ($var) { # wildcard
        foreach (keys %$vars) { # delete vars not starting with $var
            #printf "- $1 in $_? %d\n",  index( $_, $1);
            delete $vars->{$_} unless index( $_, $1) == 0;
        }
        #print Dumper $vars;
    }
} else {
    missing($var) unless $mm_config->has($var);
    if ($split) {
        $vars = $mm_config->split($var); # hashes get separated into one var per key
        $vars = { $var => $vars } if ref $vars eq 'ARRAY'; # arrays are just a list
        } else {
        $vars = { $var => $mm_config->get($var) };
    }
}

if (defined $default) { # default values
    foreach (keys %$vars) {
        my $dflag = $flags->{$_} || 0;
        delete $vars->{$_} unless ($dflag & 1) == $default;
    }
}

if (defined $custom) { # custom values
    $custom <<= 1; # bitmask 00000010
    foreach (keys %$vars) {
        my $dflag = $flags->{$_} || 0;
sub usage {
    print STDERR "Usage: $0 [--config <config file or dir>] [--split] [--[no]default] [--[no]custom] [<variable>]\n"
                ."  Variable may end in '*' wildcard.\n  --spilt can only be used with a single variable.\n";
    exit (1);
}        #print "$_ $dflag $custom\n";
        delete $vars->{$_} unless ($dflag & 2) == $custom;
    }
}

my @sigils = qw(= @ : ! $ . . . . . +);
# print output
foreach (sort keys %$vars) {
    my $val = $$vars{$_};
    my $f = $flags->{$_} || 0;
    #print $f;
    print color $f & 1 ? 'bold green' : 'bold red'; # green if default
    print $sigils[$f] // "?$f?" if $defaults;
    print $_, color 'reset';
    print '=', color $f & 2 ? 'bright_yellow' : 'bright_blue'; # yellow if local
    print ref $val ? '[ ' . join(', ', @$val) . ' ]' : "\"$val\"";
    print "\n", color 'reset';
}

sub missing {
    my $var = shift or die;
    print STDERR "Variable $var is not defined\n";
    exit (1);
}

=head1 NAME

B<lsconf.pl> - list METAMOD config variables

=head1 DESCRIPTION

Given a variable name as parameter, list the computed value (optionally parsed as a hash if the --split option is used).

With no arguments, list all variables alphabetically.

=head1 USAGE

 lsconf.pl [--help] [--config <file>] [--split] [--[no]color] [--[no]default] [--[no]custom] [variable]

=head1 LICENSE

Copyright (C) 2010 The Norwegian Meteorological Institute.

METAMOD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

=cut
