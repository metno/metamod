#!/usr/bin/perl -w

=begin LICENCE

----------------------------------------------------------------------------
  METAMOD - Web portal for metadata search and upload

  Copyright (C) 2013 met.no

  Contact information:
  Norwegian Meteorological Institute
  Box 43 Blindern
  0313 OSLO
  NORWAY
  email: geira@met.no

  This file is part of METAMOD

  METAMOD is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  METAMOD is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with METAMOD; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
----------------------------------------------------------------------------

=end LICENCE

=cut

use strict;
use warnings FATAL => qw( all );

use FindBin qw($Bin);
use lib "$Bin/common/lib";
use Metamod::Config;
use Metamod::Config::Sanity qw(check);
use Getopt::Long;
use Data::Dumper;
use Term::ANSIColor;
use Pod::Usage;

#Getopt::Long::Configure ("bundling");
my ($help, $split, $config_file_or_dir, $default, $custom, $environment, $duplicates, $flags, $check);
my $color = -t STDOUT; # use IO::Interactive::Tiny instead - FIXME
GetOptions(
    'help'          => \$help,          # for dummies
    'default!'      => \$default,       # set in default_config
    'custom!'       => \$custom,        # set in master_config
    'environment!'  => \$environment,   # set in environment
    'duplicates!'   => \$duplicates,    # same value set in default and master_config
    'color!'        => \$color,         # use colors
    'split'         => \$split,         # split var into key-value pairs
    'flags!'        => \$flags,         # show flag indicator
    'check'         => \$check,         # run sanity check
    'config=s'      => \$config_file_or_dir,
) or pod2usage(2);
#print STDERR Dumper [ $help, $split, $config_file_or_dir, $default, $custom, $environment ];

pod2usage(1) if $help;

# find config file
Metamod::Config->config_found($config_file_or_dir) or pod2usage(2);
my $mm_config = Metamod::Config->new($config_file_or_dir, { nolog => 1 } );
check($mm_config) if $check;

# check color output
if (defined $color) {
    $ENV{ANSI_COLORS_DISABLED} = 1 unless $color;
}
$flags = ! $color unless defined $flags; # use def prefix unless colorized

# process argument
my $var = shift @ARGV;
my $vars;
my $vflags = $mm_config->getallflags();

if ( !defined($var) || $var =~ /(.+)\*$/ ) {
    $vars = $mm_config->getall();
    if ($var) { # wildcard
        foreach (keys %$vars) { # delete vars not starting with $var
            #printf "- $1 in $_? %d\n",  index( $_, $1);
            delete $vars->{$_} unless index( $_, $1) == 0;
        }
    }
} else {
    missing($var) unless $mm_config->has($var);
    if ($split) {
        $vars = $mm_config->split($var); # hashes get separated into one var per key
        $vars = { $var => $vars } if ref $vars ne 'HASH'; # arrays are just a list
    } else {
        $vars = { $var => $mm_config->get($var) };
    }
}
#print STDERR Dumper $vars;

# print output
foreach (sort keys %$vars) {
    my $val = $$vars{$_};
    my $f = $vflags->{$_} || 0;
    # compare truthinesses
    next if defined $default     && ( ($f & 1)   xor $default );
    next if defined $custom      && ( ($f & 2)   xor $custom );
    next if defined $environment && ( ($f & 4)   xor $environment );
    next if defined $duplicates  && ( ($f & 128) xor $duplicates );

    printf "%08b ", $f if $flags;
    print color $f & 1 ? 'bold green' : 'bold red'; # green if default, else red
    print $_, color 'reset';
    print ' = ', color $f & 128 ? 'bright_red' : $f & 2 ? 'bright_yellow' : 'bright_blue'; # blue if default/generated, yellow if local, red if duplicate
    print ref $val ? '[ ' . join(', ', @$val) . ' ]' : $val;
    print "\n", color 'reset';
}

sub missing {
    my $var = shift or die;
    print STDERR "Variable $var is not defined\n";
    exit (1);
}

sub check_conf {
    Metamod::Config::Sanity::check();
    exit;
}

=head1 NAME

B<lsconf.pl> - list METAMOD config variables

=head1 DESCRIPTION

Given a variable name as parameter, list the computed value (optionally parsed as a key-value pair if the --split option is used).
With no arguments, list all variables alphabetically.
Variable may end in '*' wildcard. --spilt can only be used with a single variable.

=head1 USAGE

 lsconf [--help] [--config <file>] [--split] [--[no]color] [--[no]default] [--[no]environment] [--[no]flags] [--[no]custom] [--check] [variable]

=head1 ARGUMENTS

(Optional) a variable name to display, or all if none given. Wildcards (*) are accepted at the end of the string.

=head1 OPTIONS

=head2 help

=head2 config <file>

Use specified config file

=head2 split

Split key-value pairs variables. Only works when a single variable name is given as argument.

=head2 [no]color

Toggles color display according to flags (default on if terminal)

=head2 [no]default

Only show variables [not] defined in default_config

=head2 [no]flags

Show flags as prefix instead of color (default opposite of color)

=head2 [no]custom

Only show variables updated in master_config

=head2 [no]environment

Only show variables updated in environment

=head2 check

Run sanity tests on config

=head1 EXAMPLES

  $ lsconf --nocustom --nodefault   # show only variables not defined in default or config (i.e. only computed/environment variables)

=head1 LICENSE

Copyright (C) 2013 The Norwegian Meteorological Institute.

METAMOD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

=cut
