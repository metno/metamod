#!/usr/bin/perl -w

=begin LICENSE

METAMOD - Web portal for metadata search and upload

Copyright (C) 2013 met.no

Contact information:
Norwegian Meteorological Institute
Box 43 Blindern
0313 OSLO
NORWAY
email: geira@met.no

This file is part of METAMOD

METAMOD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

METAMOD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with METAMOD; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

=end LICENSE

=cut

use strict;
use warnings;

use FindBin;
use lib ("$FindBin::Bin/../../common/lib", '.');

use Metamod::DBIxSchema::Metabase;
#use Metamod::DBIxSchema::Userbase;
use Metamod::Config;
use Getopt::Long;
use Log::Log4perl qw(:levels);
#use Log::Log4perl::CommandLine qw(:all :noinit);
use Log::Log4perl::CommandLine ':all',
':loginit' => q(
    log4perl.logger = WARN,  screen
    log4perl.appender.screen=Log::Log4perl::Appender::Screen
    log4perl.appender.screen.layout=Log::Log4perl::Layout::PatternLayout
    log4perl.appender.screen.layout.ConversionPattern=[%-5p] %c %m%n
);
use Data::Dumper;
use Pod::Usage;
use Try::Tiny;
use LWP::UserAgent;
use HTTP::Status qw(:constants :is status_message);
use Term::ANSIColor;

=head1 NAME

B<lsds> - List datasets

=head1 DESCRIPTION

Work in progress...

=head1 USAGE

  lsds [-q|-v|-d] [--config dir] [-a] [-c] [-f] [--[no]color] [-p key=value]... [-o tag]... [ --wms | --projectioninfo | --xmlfile | --metadata name ... ] [ ds_id | ds_name ]

=head1 OPTIONS

=head2 -q|--quiet

=head2 --fatal

=head2 --error

=head2 --warn

=head2 -v|--verbose

=head2 -d|--debug

Controls Log4perl loglevel

B<Buggy - try using at end of command string>

=head2 --config dir

Path to master_config directory

=head2 -a|--all_levels

Search from all levels (default is only level 1)

=head2 -c|--count

Returns the number of hits instead of listing all names

=head2 -f | --[no]full

If combined with C<--wms> or other options except C<--metadata>, expand info.
Otherwise show all metadata in listing.

Implicit if called with only one argument

=head2 color

Turn ANSI color output on/off

=head2 -i | --[no]id

Show ds_id numbers

=head2 -p | --params key=value

Search parameter for finding datasets (same as web interface... more or less).

May be repeated as many times as desired, however each parameter can only be specified once. E.g.

  --param freetext=ice --param date_from=20120101 # legal
  --param freetext=ice --param freetext=sea # not legal

=head2 -o|--ownertag tag

Comma separated list of ownertags to filter search. Default is current DATASET_TAGS value from master_config.

=head2 --projectioninfo

Show projectioninfo

=head2 --wms

Show WMS URL and/or full WMSinfo, optionally (?) testing HTTP connection

=head2 --xmlfile

Show XML file path

=head2 -m|--metadata name

Show specified metadata

=head1 PARAMETERS

ds_id or ds_name (assuming the former if numeric)

=head1 EXAMPLES

  $ lsds  828 829 830 831
  $ lsds --full NORMAP/metno-sstana05-V2
  $ lsds -m dataref_OPENDAP
  $ lsds -p freetext=ice_conc
  $ lsds -c -p 'freetext=ice AND arctic'
  $ lsds --wms
  $ lsds --projectioninfo
  $ lsds --xmlfile

=cut

local $Data::Dumper::Terse = 1;

my ($config, $logger, %opt, $search_criteria);

BEGIN { # run compile time to avoid nasty "You must call new() once before you can call instance()" bug

    GetOptions(\%opt, 'help', 'config=s', 'count|c', 'all_levels', 'f|full!', 'params|p=s%',
               'metadata=s@', 'ownertag=s@', 'wms', 'projectioninfo', 'xmlfile', 'color!', 'id!') or pod2usage(2);

    my $config_file_or_dir = $opt{config} || $ENV{METAMOD_MASTER_CONFIG};
    if($opt{help} or ! Metamod::Config->config_found($config_file_or_dir)){
        pod2usage(1);
    }
    $config = Metamod::Config->new($config_file_or_dir, { nolog => 1 });
}

my $color = defined $opt{color} ? $opt{color} : -t STDOUT; # use IO::Interactive::Tiny instead - FIXME
if (defined $color) {
    $ENV{ANSI_COLORS_DISABLED} = 1 unless $color;
}

$logger = Log::Log4perl->get_logger('metamod.tools');
Log::Log4perl::CommandLine::handlelogoptions();
#printf STDERR "loglevel=%d %d\n", $logger->level, $logger->is_info;
#print STDERR Dumper \%opt, \@ARGV;


my $ownertags = ( defined $opt{ownertag} ? $opt{ownertag} : $config->split('DATASET_TAGS') ) || [];
#print STDERR Dumper \$ownertags;
@$ownertags = split( /,/, join(',', @$ownertags) ); # allow comma separated list

my $metadata = $opt{metadata} || [];
@$metadata = split( /,/, join(',', @$metadata) ); # ditto

$opt{full} = (@ARGV == 1) unless defined $opt{full}; # default to full view if only one dataset argument

#print STDERR 'params = ', Dumper $opt{params};

my $db =_build_metabase();
my $rs = $db->resultset('Dataset');

$search_criteria = {};
foreach (keys %{ $opt{params} }) {

    if (/^freetext$/) {
        $$search_criteria{$_} = [ $opt{params}->{$_} ];
    } elsif (/^date_from$/) {
        # dates => { 8 => { from => '20100205', to => '20100801', } },
    } else {
        #$$search_criteria{$_} = [ $opt{params}->{$_} ]; # not working
    }
}
#print STDERR 'search_criteria = ', Dumper $search_criteria;

my $search_params = {
        ownertags => $ownertags,
        search_criteria => $search_criteria,
        #rows_per_page   => 30,
        all_levels => $opt{all_levels}||0,
};

my $ua = LWP::UserAgent->new;
$ua->timeout(10);
#$ua->env_proxy;

if (@ARGV) {

    foreach my $dataset (@ARGV) {
        try {
            if ($dataset =~ /^\d+$/) {
                listds( $rs->find($dataset) );
            } else {
                listds( $rs->search( { ds_name => $dataset } ) ); # ->first ?
            }
        } catch {
            print STDERR "Dataset not found: $dataset\n";
            exit 1;
        }
    }

} else {
    #$rs->search();
    my $result = $rs->metadata_search($search_params); # this might die, if so then just abort

    if ( $opt{count} ) {
        printf "Search returned %d hits.\n", $result->count;
    } else {
        while (my $ds = $result->next) {
            listds($ds);
        }
    }
}

exit 0;

sub listds {
    my $ds = shift or die "No such dataset";

    my ($id, $name) = ($ds->ds_id, $ds->ds_name);
    my $lead = colored($name, 'bold green');
    $lead .= colored(" [$id]", 'bold blue') if $opt{id};

    if ($opt{wms}) {

        return unless $ds->wmsinfo;
        if (my $url = $ds->wmsurl) {
            my $rq = $ua->get("${url}service=WMS&version=1.3.0&request=GetCapabilities");
            printf "$lead: $url - %d %s\n", $rq->code, status_message($rq->code);
        } else {
            printf "$lead: %s\n", colored('*Missing URL*', 'bold red');
        }
        print $ds->wmsinfo->toString(1) if $opt{full};
        return;

    } elsif ($opt{projectioninfo}) {

        my $pi = $ds->projectioninfo or return;
        print "$lead:\n", $pi->toString(1);

    } elsif ($opt{xmlfile}) {

        if (my $file = $ds->xmlfile) {
            printf "$lead: $file - %s\n", -r $file ? 'OK' : colored('Not found');
        } else {
            printf "$lead: %s\n", colored('*Missing XMLfile*', 'bold red');
        }

    } elsif ($opt{full} || @$metadata) {

        my $list = $opt{full} || @$metadata > 1; # not compact format
        print "$lead:\n" if $list;
        if ($opt{full}) {
            my %row = $ds->get_columns;
            #print STDERR Dumper \%row;
            foreach my $c ( sort keys %row ) {
                printf "  %s: %s\n", colored($c, 'bold blue'), $row{$c};
            }
            printf "  %s: %s (%s)\n", colored('children', 'bold blue'),
                #ref $ds->child_datasets;
                $ds->num_children,
                join( ', ', map( $_->ds_id, $ds->child_datasets->all ) );
        }

        my $md = $ds->metadata($metadata);
        foreach my $k (keys %$md) {
            foreach ( @{ $md->{$k} } ) {
                if ($list) {
                    printf "  %s: $_\n", colored($k, 'bold yellow');
                } else {
                    print "$lead: $_\n";
                }
            }
        }

    } else {
        print "$lead\n";
    }

}

sub _build_metabase {

    my $metabase = Metamod::DBIxSchema::Metabase->connect(
        $config->getDSN(),
        $config->get('PG_ADMIN_USER'),
        $config->has('PG_ADMIN_USER_PASSWORD') ? $config->get('PG_ADMIN_USER_PASSWORD') : '',
    ) or die "No connect";

    #my $query_log = DBIx::Class::QueryLog->new;
    #$metabase->storage->debugobj($query_log);

    return $metabase;
}

sub getXML {
    my $url = shift or die "Missing URL";
    #$logger->debug('GET ' . $url);

    my $response = $ua->get($url);

    if ($response->is_success) {
        #print STDERR $response->content;
        my $dom;
        eval { $dom = XML::LibXML->load_xml( string => $response->content ) }
            or croak($@);
        return $dom;
    }
    else {
        $logger->info("getXML failed for for $url: " . $response->status_line);
        die("getXML failed for for $url: " . $response->status_line);
    }
}

=head1 AUTHOR

Geir Aalberg, E<lt>geira@met.noE<gt>

=head1 LICENSE

Copyright (C) 2013 The Norwegian Meteorological Institute.

METAMOD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

=cut
