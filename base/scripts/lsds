#!/usr/bin/perl -w

=begin LICENSE

METAMOD - Web portal for metadata search and upload

Copyright (C) 2013 met.no

Contact information:
Norwegian Meteorological Institute
Box 43 Blindern
0313 OSLO
NORWAY
email: geira@met.no

This file is part of METAMOD

METAMOD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

METAMOD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with METAMOD; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

=end LICENSE

=cut

use strict;
use warnings;

use FindBin;
use lib ("$FindBin::Bin/../../common/lib", '.');

use Metamod::Config;
use Metamod::DBIxSchema::Metabase;
#use Metamod::DBIxSchema::Userbase;
use Metamod::SearchUtils;
use DBIx::Class::ResultClass::HashRefInflator;

use Getopt::Long;
use Log::Log4perl qw(:levels);
#use Log::Log4perl::CommandLine qw(:all :noinit);
use Log::Log4perl::CommandLine ':all',
':loginit' => q(
    log4perl.logger = WARN,  screen
    log4perl.appender.screen=Log::Log4perl::Appender::Screen
    log4perl.appender.screen.layout=Log::Log4perl::Layout::PatternLayout
    log4perl.appender.screen.layout.ConversionPattern=[%-5p] %c %m%n
);
use Data::Dumper;
use Pod::Usage;
use Try::Tiny;
use LWP::UserAgent;
use HTTP::Status qw(:constants :is status_message);
use Term::ANSIColor;

=head1 NAME

B<lsds> - List datasets

=head1 DESCRIPTION

Work in progress...

=head1 USAGE

  lsds [-q|-v|-d] [--config dir] [-a] [-c] [-f] [--[no]color] [-p key=value]... [-o tag]... [ --wms | --projectioninfo | --xmlfile | --metadata name ... ] [ ds_id | ds_name ]

=head1 OPTIONS

=head2 -h|--help

Show manual page

=head2 -q|--quiet, --off (max32)

=head2 --fatal (5)

=head2 --error (4)

=head2 --warn (3)

=head2 --info, -v|--verbose (2)

=head2 -d|--debug (3... should be 1?)

Controls Log4perl loglevel

B<Buggy - try using at end of command string>

=head2 --config dir

Path to master_config directory

=head2 -a|--all_levels

Search from all levels (default is only level 1)

=head2 -c|--count

Returns the number of hits instead of listing all names

=head2 -f | --[no]full

If combined with C<--wms> or other options except C<--metadata>, expand info.
Otherwise show all metadata in listing.

Implicit if called with only one argument

=head2 -x | --color

Turn ANSI color output on/off

=head2 -i | --[no]id

Show ds_id numbers

=head2 --freetext

Free text search parameter, including booleans:

  --freetext=glacier
  --freetext='ice AND arctic'

This should probably be called fulltext, but conflicts with --full parameter.

=head2 --date_from, --date_to

Search by datacollection period in YYYY-MM-DD format (may be shortened):

  --date_from=1957 --date_to=1958

=head2 --activity_types, --areas, --variables, --institutions, --operational_status

Search by basickey. Repeat for multiple values or use comma separated list. These forms are equivalent:

  --areas=1610 --areas=1615
  --areas=1610,1615

=head2 --topics_and_variables

Search by hierarchical key

  $ lsds --topic=406

=head2 --map_search

Search by map coordinates. The order is x1,y1,x2,y2,SRID:

  --map_search=9.4,81,27.817,73.74,4326

=head2 -o|--ownertag tag

Comma separated list of ownertags to filter search. Default is current DATASET_TAGS value from master_config.
Setting to blank ('') causes search to span all ownertags.

=head2 --projectioninfo

Show projectioninfo

=head2 --wms

Show WMS URL and/or full WMSinfo, testing HTTP connection (should be made optional)

=head2 --xmlfile

Show XML file path

=head2 -m|--metadata name

Show specified metadata

=head1 PARAMETERS

ds_id or ds_name (assuming the former if numeric)

=head1 EXAMPLES

  $ lsds 828 829 830 831
  $ lsds --full NORMAP/metno-sstana05-V2
  $ lsds -m dataref_OPENDAP

$ lsds --areas=1620
$ lsds --topic=406
$ lsds --activity_types=1605
$ lsds --date_from=2015-11-11
$ lsds --map_search=9.4,81,27.817,73.74,4326

  $ lsds --freetext=ice
  $ lsds --freetext='ice AND arctic'
  $ lsds --freetext='ice' --freetext='arctic'

  $ lsds --wms
  $ lsds --projectioninfo
  $ lsds --xmlfile
  $ lsds -c --ownertag ''

=cut

local $Data::Dumper::Terse = 1;

my ($config, $logger, %opt, $ua);

BEGIN { # run compile time to avoid nasty "You must call new() once before you can call instance()" bug

    GetOptions(\%opt, 'help|h!', 'config=s', 'count|c', 'all_levels', 'f|full!',
               'date_from=s', 'date_to=s', 'map_search=s', 'freetext=s@', 'variables=s@',
               'activity_types=s@', 'topics_and_variables=s@', 'areas=s@', 'operational_status=s@', # TODO: read from searchcategories instead of hardcoded
               'metadata=s@', 'ownertag=s@', 'wms', 'projectioninfo', 'xmlfile', 'color|x!', 'id!') or pod2usage(2);

    my $config_file_or_dir = $opt{config} || $ENV{METAMOD_MASTER_CONFIG};
    if($opt{help} or ! Metamod::Config->config_found($config_file_or_dir)){
        pod2usage(1);
    }
    $config = Metamod::Config->new($config_file_or_dir, { nolog => 1 });
}

my $color = defined $opt{color} ? $opt{color} : -t STDOUT; # use IO::Interactive::Tiny instead - FIXME
if (defined $color) {
    $ENV{ANSI_COLORS_DISABLED} = 1 unless $color;
}

# parse loglevel options
$logger = Log::Log4perl->get_logger('metamod.tools');
Log::Log4perl::CommandLine::handlelogoptions();
#printf STDERR "loglevel=%d %d\n", $logger->level, $logger->is_info;
#print STDERR Dumper \%opt, \@ARGV;

my $ownertags = ( defined $opt{ownertag} ? $opt{ownertag} : $config->split('DATASET_TAGS') ) || []; # allow setting to blank, i.e. all tags
$ownertags = [ $ownertags ] unless ref $ownertags;
foreach (@$ownertags) {
    #$_ = 'xxx';
}
#print STDERR "OWNERTAGS = ", Dumper $ownertags;
#$ownertags = join(',', @$ownertags);
#@$ownertags = split( /,/, $ownertags ); # allow comma separated list

my $metadata = $opt{metadata} || [];
@$metadata = split( /,/, join(',', @$metadata) ); # ditto

$opt{full} = (@ARGV == 1) unless defined $opt{full} || @$metadata; # default to full view if only one dataset argument

#print STDERR 'params = ', Dumper $opt{params};

# setup database stuff
#
my $db =_build_metabase();

# get search categories list
my $sc_rs = $db->resultset('Searchcategory');
# faking MetamodWeb::Utils::UI::Search::search_categories here, getting results as array instead of DBIx::Class objects
my @cats = $sc_rs->search( {}, { result_class => 'DBIx::Class::ResultClass::HashRefInflator' })->all;
#print STDERR Dumper \@cats;

# prepare dataset search
my $rs = $db->resultset('Dataset');
my $search_utils = Metamod::SearchUtils->new( { config => $config } );
my $search_criteria = $search_utils->selected_criteria( \@cats, \%opt );
print STDERR 'search_criteria = ', Dumper $search_criteria if $logger->is_info;
my $search_params = {
        ownertags => $ownertags,
        search_criteria => $search_criteria,
        #rows_per_page   => 30,
        all_levels => $opt{all_levels}||0,
};

# prepare for getting Capabilities from WMS servers
#
if ($opt{wms}) {
    $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    #$ua->env_proxy;
}

if (@ARGV) {

    foreach my $dataset (@ARGV) {
        try {
            if ($dataset =~ /^\d+$/) {
                listds( $rs->find($dataset) );
            } else {
                listds( $rs->search( { ds_name => $dataset } ) ); # ->first ?
            }
        } catch {
            print STDERR "Dataset not found: $dataset\n";
            exit 1;
        }
    }

} else {
    my $result = $rs->metadata_search($search_params); # this might die, if so then just abort

    if ( $opt{count} ) {
        printf "Search returned %d hits.\n", $result->count;
    } else {
        while (my $ds = $result->next) {
            listds($ds);
        }
    }
}

exit 0;

sub listds {
    my $ds = shift or die "No such dataset";

    my ($id, $name) = ($ds->ds_id, $ds->ds_name);
    my $lead = colored($name, 'bold green');
    $lead .= colored(" [$id]", 'bold blue') if $opt{id};

    if ($opt{wms}) {

        return unless $ds->wmsinfo;
        if (my $url = $ds->wmsurl) {
            my $rq = $ua->get($url . $config->get('WMS_GET_CAPABILITIES'));
            printf "$lead: $url - %d %s\n", $rq->code, status_message($rq->code);
        } else {
            printf "$lead: %s\n", colored('*Missing URL*', 'bold red');
        }
        print $ds->wmsinfo->toString(1) if $opt{full};
        return;

    } elsif ($opt{projectioninfo}) {

        my $pi = $ds->projectioninfo or return;
        print "$lead:\n", $pi->toString(1);

    } elsif ($opt{xmlfile}) {

        if (my $file = $ds->xmlfile) {
            printf "$lead: $file - %s\n", -r $file ? 'OK' : colored('Not found');
        } else {
            printf "$lead: %s\n", colored('*Missing XMLfile*', 'bold red');
        }

    } elsif ($opt{full} || @$metadata) {

        my $list = $opt{full} || @$metadata > 1; # not compact format
        print "$lead:\n" if $list;
        if ($opt{full}) {
            my %row = $ds->get_columns;
            #print STDERR Dumper \%row;
            foreach my $c ( sort keys %row ) {
                printf "  %s: %s\n", colored($c, 'bold blue'), $row{$c};
            }
            printf "  %s: %s (%s)\n", colored('children', 'bold blue'),
                #ref $ds->child_datasets;
                $ds->num_children,
                join( ', ', map( $_->ds_id, $ds->child_datasets->all ) );
        }

        my $md = $ds->metadata($metadata);
        foreach my $k (sort keys %$md) {
            foreach ( @{ $md->{$k} } ) {
                if ($list) {
                    printf "  %s: $_\n", colored($k, 'bold yellow');
                } else {
                    print "$lead: $_\n";
                }
            }
        }

    } else {
        print "$lead\n";
    }

}

sub _build_metabase {

    my $metabase = Metamod::DBIxSchema::Metabase->connect(
        $config->getDSN(),
        $config->get('PG_ADMIN_USER'),
        $config->has('PG_ADMIN_USER_PASSWORD') ? $config->get('PG_ADMIN_USER_PASSWORD') : '',
    ) or die "No connect";

    #my $query_log = DBIx::Class::QueryLog->new;
    #$metabase->storage->debugobj($query_log);

    return $metabase;
}

sub getXML {
    my $url = shift or die "Missing URL";
    #$logger->debug('GET ' . $url);

    my $response = $ua->get($url);

    if ($response->is_success) {
        #print STDERR $response->content;
        my $dom;
        eval { $dom = XML::LibXML->load_xml( string => $response->content ) }
            or croak($@);
        return $dom;
    }
    else {
        $logger->info("getXML failed for for $url: " . $response->status_line);
        die("getXML failed for for $url: " . $response->status_line);
    }
}

=head1 AUTHOR

Geir Aalberg, E<lt>geira@met.noE<gt>

=head1 LICENSE

Copyright (C) 2013 The Norwegian Meteorological Institute.

METAMOD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

=cut
